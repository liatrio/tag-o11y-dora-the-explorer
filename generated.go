// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package main

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// __createIssueInput is used internally by genqlient
type __createIssueInput struct {
	Body         string `json:"Body"`
	Title        string `json:"Title"`
	RepositoryId string `json:"RepositoryId"`
}

// GetBody returns __createIssueInput.Body, and is useful for accessing the field via an interface.
func (v *__createIssueInput) GetBody() string { return v.Body }

// GetTitle returns __createIssueInput.Title, and is useful for accessing the field via an interface.
func (v *__createIssueInput) GetTitle() string { return v.Title }

// GetRepositoryId returns __createIssueInput.RepositoryId, and is useful for accessing the field via an interface.
func (v *__createIssueInput) GetRepositoryId() string { return v.RepositoryId }

// __createPullRequestInput is used internally by genqlient
type __createPullRequestInput struct {
	BaseRefName  string `json:"BaseRefName"`
	Body         string `json:"Body"`
	HeadRefName  string `json:"HeadRefName"`
	RepositoryId string `json:"RepositoryId"`
	Title        string `json:"Title"`
}

// GetBaseRefName returns __createPullRequestInput.BaseRefName, and is useful for accessing the field via an interface.
func (v *__createPullRequestInput) GetBaseRefName() string { return v.BaseRefName }

// GetBody returns __createPullRequestInput.Body, and is useful for accessing the field via an interface.
func (v *__createPullRequestInput) GetBody() string { return v.Body }

// GetHeadRefName returns __createPullRequestInput.HeadRefName, and is useful for accessing the field via an interface.
func (v *__createPullRequestInput) GetHeadRefName() string { return v.HeadRefName }

// GetRepositoryId returns __createPullRequestInput.RepositoryId, and is useful for accessing the field via an interface.
func (v *__createPullRequestInput) GetRepositoryId() string { return v.RepositoryId }

// GetTitle returns __createPullRequestInput.Title, and is useful for accessing the field via an interface.
func (v *__createPullRequestInput) GetTitle() string { return v.Title }

// __getRepoIdInput is used internally by genqlient
type __getRepoIdInput struct {
	Owner string `json:"Owner"`
	Name  string `json:"Name"`
}

// GetOwner returns __getRepoIdInput.Owner, and is useful for accessing the field via an interface.
func (v *__getRepoIdInput) GetOwner() string { return v.Owner }

// GetName returns __getRepoIdInput.Name, and is useful for accessing the field via an interface.
func (v *__getRepoIdInput) GetName() string { return v.Name }

// __getUserInput is used internally by genqlient
type __getUserInput struct {
	Login string `json:"Login"`
}

// GetLogin returns __getUserInput.Login, and is useful for accessing the field via an interface.
func (v *__getUserInput) GetLogin() string { return v.Login }

// createIssueCreateIssueCreateIssuePayload includes the requested fields of the GraphQL type CreateIssuePayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of CreateIssue
type createIssueCreateIssueCreateIssuePayload struct {
	// The new issue.
	Issue createIssueCreateIssueCreateIssuePayloadIssue `json:"issue"`
}

// GetIssue returns createIssueCreateIssueCreateIssuePayload.Issue, and is useful for accessing the field via an interface.
func (v *createIssueCreateIssueCreateIssuePayload) GetIssue() createIssueCreateIssueCreateIssuePayloadIssue {
	return v.Issue
}

// createIssueCreateIssueCreateIssuePayloadIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
type createIssueCreateIssueCreateIssuePayloadIssue struct {
	// The Node ID of the Issue object
	Id string `json:"id"`
}

// GetId returns createIssueCreateIssueCreateIssuePayloadIssue.Id, and is useful for accessing the field via an interface.
func (v *createIssueCreateIssueCreateIssuePayloadIssue) GetId() string { return v.Id }

// createIssueResponse is returned by createIssue on success.
type createIssueResponse struct {
	// Creates a new issue.
	CreateIssue createIssueCreateIssueCreateIssuePayload `json:"createIssue"`
}

// GetCreateIssue returns createIssueResponse.CreateIssue, and is useful for accessing the field via an interface.
func (v *createIssueResponse) GetCreateIssue() createIssueCreateIssueCreateIssuePayload {
	return v.CreateIssue
}

// createPullRequestCreatePullRequestCreatePullRequestPayload includes the requested fields of the GraphQL type CreatePullRequestPayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of CreatePullRequest
type createPullRequestCreatePullRequestCreatePullRequestPayload struct {
	// The new pull request.
	PullRequest createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest `json:"pullRequest"`
}

// GetPullRequest returns createPullRequestCreatePullRequestCreatePullRequestPayload.PullRequest, and is useful for accessing the field via an interface.
func (v *createPullRequestCreatePullRequestCreatePullRequestPayload) GetPullRequest() createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest {
	return v.PullRequest
}

// createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest includes the requested fields of the GraphQL type PullRequest.
// The GraphQL type's documentation follows.
//
// A repository pull request.
type createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest struct {
	// The Node ID of the PullRequest object
	Id string `json:"id"`
}

// GetId returns createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest.Id, and is useful for accessing the field via an interface.
func (v *createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest) GetId() string {
	return v.Id
}

// createPullRequestResponse is returned by createPullRequest on success.
type createPullRequestResponse struct {
	// Create a new pull request
	CreatePullRequest createPullRequestCreatePullRequestCreatePullRequestPayload `json:"createPullRequest"`
}

// GetCreatePullRequest returns createPullRequestResponse.CreatePullRequest, and is useful for accessing the field via an interface.
func (v *createPullRequestResponse) GetCreatePullRequest() createPullRequestCreatePullRequestCreatePullRequestPayload {
	return v.CreatePullRequest
}

// getRepoIdRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type getRepoIdRepository struct {
	// The Node ID of the Repository object
	Id string `json:"id"`
}

// GetId returns getRepoIdRepository.Id, and is useful for accessing the field via an interface.
func (v *getRepoIdRepository) GetId() string { return v.Id }

// getRepoIdResponse is returned by getRepoId on success.
type getRepoIdResponse struct {
	// Lookup a given repository by the owner and repository name.
	Repository getRepoIdRepository `json:"repository"`
}

// GetRepository returns getRepoIdResponse.Repository, and is useful for accessing the field via an interface.
func (v *getRepoIdResponse) GetRepository() getRepoIdRepository { return v.Repository }

// getUserResponse is returned by getUser on success.
type getUserResponse struct {
	// Lookup a user by login.
	User getUserUser `json:"user"`
}

// GetUser returns getUserResponse.User, and is useful for accessing the field via an interface.
func (v *getUserResponse) GetUser() getUserUser { return v.User }

// getUserUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type getUserUser struct {
	// The user's public profile name.
	TheirName string `json:"theirName"`
	// Identifies the date and time when the object was created.
	CreatedAt time.Time `json:"createdAt"`
}

// GetTheirName returns getUserUser.TheirName, and is useful for accessing the field via an interface.
func (v *getUserUser) GetTheirName() string { return v.TheirName }

// GetCreatedAt returns getUserUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *getUserUser) GetCreatedAt() time.Time { return v.CreatedAt }

// getViewerResponse is returned by getViewer on success.
type getViewerResponse struct {
	// The currently authenticated user.
	Viewer getViewerViewerUser `json:"viewer"`
}

// GetViewer returns getViewerResponse.Viewer, and is useful for accessing the field via an interface.
func (v *getViewerResponse) GetViewer() getViewerViewerUser { return v.Viewer }

// getViewerViewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type getViewerViewerUser struct {
	// The user's public profile name.
	MyName string `json:"MyName"`
	// Identifies the date and time when the object was created.
	CreatedAt time.Time `json:"createdAt"`
}

// GetMyName returns getViewerViewerUser.MyName, and is useful for accessing the field via an interface.
func (v *getViewerViewerUser) GetMyName() string { return v.MyName }

// GetCreatedAt returns getViewerViewerUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *getViewerViewerUser) GetCreatedAt() time.Time { return v.CreatedAt }

// The query or mutation executed by createIssue.
const createIssue_Operation = `
mutation createIssue ($Body: String!, $Title: String!, $RepositoryId: ID!) {
	createIssue(input: {body:$Body,title:$Title,repositoryId:$RepositoryId}) {
		issue {
			id
		}
	}
}
`

func createIssue(
	ctx_ context.Context,
	client_ graphql.Client,
	Body string,
	Title string,
	RepositoryId string,
) (*createIssueResponse, error) {
	req_ := &graphql.Request{
		OpName: "createIssue",
		Query:  createIssue_Operation,
		Variables: &__createIssueInput{
			Body:         Body,
			Title:        Title,
			RepositoryId: RepositoryId,
		},
	}
	var err_ error

	var data_ createIssueResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createPullRequest.
const createPullRequest_Operation = `
mutation createPullRequest ($BaseRefName: String!, $Body: String!, $HeadRefName: String!, $RepositoryId: ID!, $Title: String!) {
	createPullRequest(input: {baseRefName:$BaseRefName,body:$Body,headRefName:$HeadRefName,repositoryId:$RepositoryId,title:$Title}) {
		pullRequest {
			id
		}
	}
}
`

func createPullRequest(
	ctx_ context.Context,
	client_ graphql.Client,
	BaseRefName string,
	Body string,
	HeadRefName string,
	RepositoryId string,
	Title string,
) (*createPullRequestResponse, error) {
	req_ := &graphql.Request{
		OpName: "createPullRequest",
		Query:  createPullRequest_Operation,
		Variables: &__createPullRequestInput{
			BaseRefName:  BaseRefName,
			Body:         Body,
			HeadRefName:  HeadRefName,
			RepositoryId: RepositoryId,
			Title:        Title,
		},
	}
	var err_ error

	var data_ createPullRequestResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getRepoId.
const getRepoId_Operation = `
query getRepoId ($Owner: String!, $Name: String!) {
	repository(owner: $Owner, name: $Name) {
		id
	}
}
`

func getRepoId(
	ctx_ context.Context,
	client_ graphql.Client,
	Owner string,
	Name string,
) (*getRepoIdResponse, error) {
	req_ := &graphql.Request{
		OpName: "getRepoId",
		Query:  getRepoId_Operation,
		Variables: &__getRepoIdInput{
			Owner: Owner,
			Name:  Name,
		},
	}
	var err_ error

	var data_ getRepoIdResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getUser.
const getUser_Operation = `
query getUser ($Login: String!) {
	user(login: $Login) {
		theirName: name
		createdAt
	}
}
`

// getUser gets the given user's name from their username.
func getUser(
	ctx_ context.Context,
	client_ graphql.Client,
	Login string,
) (*getUserResponse, error) {
	req_ := &graphql.Request{
		OpName: "getUser",
		Query:  getUser_Operation,
		Variables: &__getUserInput{
			Login: Login,
		},
	}
	var err_ error

	var data_ getUserResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getViewer.
const getViewer_Operation = `
query getViewer {
	viewer {
		MyName: name
		createdAt
	}
}
`

func getViewer(
	ctx_ context.Context,
	client_ graphql.Client,
) (*getViewerResponse, error) {
	req_ := &graphql.Request{
		OpName: "getViewer",
		Query:  getViewer_Operation,
	}
	var err_ error

	var data_ getViewerResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
