// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package main

import (
	"context"
	"time"

	"github.com/Khan/genqlient/graphql"
)

// The possible states in which a deployment can be.
type DeploymentState string

const (
	// The pending deployment was not updated after 30 minutes.
	DeploymentStateAbandoned DeploymentState = "ABANDONED"
	// The deployment is currently active.
	DeploymentStateActive DeploymentState = "ACTIVE"
	// An inactive transient deployment.
	DeploymentStateDestroyed DeploymentState = "DESTROYED"
	// The deployment experienced an error.
	DeploymentStateError DeploymentState = "ERROR"
	// The deployment has failed.
	DeploymentStateFailure DeploymentState = "FAILURE"
	// The deployment is inactive.
	DeploymentStateInactive DeploymentState = "INACTIVE"
	// The deployment is in progress.
	DeploymentStateInProgress DeploymentState = "IN_PROGRESS"
	// The deployment is pending.
	DeploymentStatePending DeploymentState = "PENDING"
	// The deployment has queued
	DeploymentStateQueued DeploymentState = "QUEUED"
	// The deployment was successful.
	DeploymentStateSuccess DeploymentState = "SUCCESS"
	// The deployment is waiting.
	DeploymentStateWaiting DeploymentState = "WAITING"
)

// The possible states for a deployment status.
type DeploymentStatusState string

const (
	// The deployment experienced an error.
	DeploymentStatusStateError DeploymentStatusState = "ERROR"
	// The deployment has failed.
	DeploymentStatusStateFailure DeploymentStatusState = "FAILURE"
	// The deployment is inactive.
	DeploymentStatusStateInactive DeploymentStatusState = "INACTIVE"
	// The deployment is in progress.
	DeploymentStatusStateInProgress DeploymentStatusState = "IN_PROGRESS"
	// The deployment is pending.
	DeploymentStatusStatePending DeploymentStatusState = "PENDING"
	// The deployment is queued
	DeploymentStatusStateQueued DeploymentStatusState = "QUEUED"
	// The deployment was successful.
	DeploymentStatusStateSuccess DeploymentStatusState = "SUCCESS"
	// The deployment is waiting.
	DeploymentStatusStateWaiting DeploymentStatusState = "WAITING"
)

// The possible commit status states.
type StatusState string

const (
	// Status is errored.
	StatusStateError StatusState = "ERROR"
	// Status is expected.
	StatusStateExpected StatusState = "EXPECTED"
	// Status is failing.
	StatusStateFailure StatusState = "FAILURE"
	// Status is pending.
	StatusStatePending StatusState = "PENDING"
	// Status is successful.
	StatusStateSuccess StatusState = "SUCCESS"
)

// __createIssueInput is used internally by genqlient
type __createIssueInput struct {
	Body         string `json:"Body"`
	Title        string `json:"Title"`
	RepositoryId string `json:"RepositoryId"`
}

// GetBody returns __createIssueInput.Body, and is useful for accessing the field via an interface.
func (v *__createIssueInput) GetBody() string { return v.Body }

// GetTitle returns __createIssueInput.Title, and is useful for accessing the field via an interface.
func (v *__createIssueInput) GetTitle() string { return v.Title }

// GetRepositoryId returns __createIssueInput.RepositoryId, and is useful for accessing the field via an interface.
func (v *__createIssueInput) GetRepositoryId() string { return v.RepositoryId }

// __createPullRequestInput is used internally by genqlient
type __createPullRequestInput struct {
	BaseRefName  string `json:"BaseRefName"`
	Body         string `json:"Body"`
	HeadRefName  string `json:"HeadRefName"`
	RepositoryId string `json:"RepositoryId"`
	Title        string `json:"Title"`
}

// GetBaseRefName returns __createPullRequestInput.BaseRefName, and is useful for accessing the field via an interface.
func (v *__createPullRequestInput) GetBaseRefName() string { return v.BaseRefName }

// GetBody returns __createPullRequestInput.Body, and is useful for accessing the field via an interface.
func (v *__createPullRequestInput) GetBody() string { return v.Body }

// GetHeadRefName returns __createPullRequestInput.HeadRefName, and is useful for accessing the field via an interface.
func (v *__createPullRequestInput) GetHeadRefName() string { return v.HeadRefName }

// GetRepositoryId returns __createPullRequestInput.RepositoryId, and is useful for accessing the field via an interface.
func (v *__createPullRequestInput) GetRepositoryId() string { return v.RepositoryId }

// GetTitle returns __createPullRequestInput.Title, and is useful for accessing the field via an interface.
func (v *__createPullRequestInput) GetTitle() string { return v.Title }

// __getLatestDeploymentsInput is used internally by genqlient
type __getLatestDeploymentsInput struct {
	Owner string `json:"owner"`
	Repo  string `json:"repo"`
}

// GetOwner returns __getLatestDeploymentsInput.Owner, and is useful for accessing the field via an interface.
func (v *__getLatestDeploymentsInput) GetOwner() string { return v.Owner }

// GetRepo returns __getLatestDeploymentsInput.Repo, and is useful for accessing the field via an interface.
func (v *__getLatestDeploymentsInput) GetRepo() string { return v.Repo }

// __getPullRequestStatusCheckRollupInput is used internally by genqlient
type __getPullRequestStatusCheckRollupInput struct {
	Owner    string `json:"owner"`
	Repo     string `json:"repo"`
	PrNumber int    `json:"prNumber"`
}

// GetOwner returns __getPullRequestStatusCheckRollupInput.Owner, and is useful for accessing the field via an interface.
func (v *__getPullRequestStatusCheckRollupInput) GetOwner() string { return v.Owner }

// GetRepo returns __getPullRequestStatusCheckRollupInput.Repo, and is useful for accessing the field via an interface.
func (v *__getPullRequestStatusCheckRollupInput) GetRepo() string { return v.Repo }

// GetPrNumber returns __getPullRequestStatusCheckRollupInput.PrNumber, and is useful for accessing the field via an interface.
func (v *__getPullRequestStatusCheckRollupInput) GetPrNumber() int { return v.PrNumber }

// __getRepoIdInput is used internally by genqlient
type __getRepoIdInput struct {
	Owner string `json:"Owner"`
	Name  string `json:"Name"`
}

// GetOwner returns __getRepoIdInput.Owner, and is useful for accessing the field via an interface.
func (v *__getRepoIdInput) GetOwner() string { return v.Owner }

// GetName returns __getRepoIdInput.Name, and is useful for accessing the field via an interface.
func (v *__getRepoIdInput) GetName() string { return v.Name }

// __getUserInput is used internally by genqlient
type __getUserInput struct {
	Login string `json:"Login"`
}

// GetLogin returns __getUserInput.Login, and is useful for accessing the field via an interface.
func (v *__getUserInput) GetLogin() string { return v.Login }

// __mergePullRequestInput is used internally by genqlient
type __mergePullRequestInput struct {
	PullRequestId string `json:"pullRequestId"`
}

// GetPullRequestId returns __mergePullRequestInput.PullRequestId, and is useful for accessing the field via an interface.
func (v *__mergePullRequestInput) GetPullRequestId() string { return v.PullRequestId }

// createIssueCreateIssueCreateIssuePayload includes the requested fields of the GraphQL type CreateIssuePayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of CreateIssue
type createIssueCreateIssueCreateIssuePayload struct {
	// The new issue.
	Issue createIssueCreateIssueCreateIssuePayloadIssue `json:"issue"`
}

// GetIssue returns createIssueCreateIssueCreateIssuePayload.Issue, and is useful for accessing the field via an interface.
func (v *createIssueCreateIssueCreateIssuePayload) GetIssue() createIssueCreateIssueCreateIssuePayloadIssue {
	return v.Issue
}

// createIssueCreateIssueCreateIssuePayloadIssue includes the requested fields of the GraphQL type Issue.
// The GraphQL type's documentation follows.
//
// An Issue is a place to discuss ideas, enhancements, tasks, and bugs for a project.
type createIssueCreateIssueCreateIssuePayloadIssue struct {
	// The Node ID of the Issue object
	Id string `json:"id"`
}

// GetId returns createIssueCreateIssueCreateIssuePayloadIssue.Id, and is useful for accessing the field via an interface.
func (v *createIssueCreateIssueCreateIssuePayloadIssue) GetId() string { return v.Id }

// createIssueResponse is returned by createIssue on success.
type createIssueResponse struct {
	// Creates a new issue.
	CreateIssue createIssueCreateIssueCreateIssuePayload `json:"createIssue"`
}

// GetCreateIssue returns createIssueResponse.CreateIssue, and is useful for accessing the field via an interface.
func (v *createIssueResponse) GetCreateIssue() createIssueCreateIssueCreateIssuePayload {
	return v.CreateIssue
}

// createPullRequestCreatePullRequestCreatePullRequestPayload includes the requested fields of the GraphQL type CreatePullRequestPayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of CreatePullRequest
type createPullRequestCreatePullRequestCreatePullRequestPayload struct {
	// The new pull request.
	PullRequest createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest `json:"pullRequest"`
}

// GetPullRequest returns createPullRequestCreatePullRequestCreatePullRequestPayload.PullRequest, and is useful for accessing the field via an interface.
func (v *createPullRequestCreatePullRequestCreatePullRequestPayload) GetPullRequest() createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest {
	return v.PullRequest
}

// createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest includes the requested fields of the GraphQL type PullRequest.
// The GraphQL type's documentation follows.
//
// A repository pull request.
type createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest struct {
	// The Node ID of the PullRequest object
	Id string `json:"id"`
	// Identifies the pull request number.
	Number int `json:"number"`
}

// GetId returns createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest.Id, and is useful for accessing the field via an interface.
func (v *createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest) GetId() string {
	return v.Id
}

// GetNumber returns createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest.Number, and is useful for accessing the field via an interface.
func (v *createPullRequestCreatePullRequestCreatePullRequestPayloadPullRequest) GetNumber() int {
	return v.Number
}

// createPullRequestResponse is returned by createPullRequest on success.
type createPullRequestResponse struct {
	// Create a new pull request
	CreatePullRequest createPullRequestCreatePullRequestCreatePullRequestPayload `json:"createPullRequest"`
}

// GetCreatePullRequest returns createPullRequestResponse.CreatePullRequest, and is useful for accessing the field via an interface.
func (v *createPullRequestResponse) GetCreatePullRequest() createPullRequestCreatePullRequestCreatePullRequestPayload {
	return v.CreatePullRequest
}

// getLatestDeploymentsRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type getLatestDeploymentsRepository struct {
	// Deployments associated with the repository
	Deployments getLatestDeploymentsRepositoryDeploymentsDeploymentConnection `json:"deployments"`
}

// GetDeployments returns getLatestDeploymentsRepository.Deployments, and is useful for accessing the field via an interface.
func (v *getLatestDeploymentsRepository) GetDeployments() getLatestDeploymentsRepositoryDeploymentsDeploymentConnection {
	return v.Deployments
}

// getLatestDeploymentsRepositoryDeploymentsDeploymentConnection includes the requested fields of the GraphQL type DeploymentConnection.
// The GraphQL type's documentation follows.
//
// The connection type for Deployment.
type getLatestDeploymentsRepositoryDeploymentsDeploymentConnection struct {
	// A list of nodes.
	Nodes []getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeployment `json:"nodes"`
}

// GetNodes returns getLatestDeploymentsRepositoryDeploymentsDeploymentConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getLatestDeploymentsRepositoryDeploymentsDeploymentConnection) GetNodes() []getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeployment {
	return v.Nodes
}

// getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeployment includes the requested fields of the GraphQL type Deployment.
// The GraphQL type's documentation follows.
//
// Represents triggered deployment instance.
type getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeployment struct {
	// Identifies the date and time when the object was created.
	CreatedAt time.Time `json:"createdAt"`
	// Identifies the commit sha of the deployment.
	Commit getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeploymentCommit `json:"commit"`
	// The deployment description.
	Description string `json:"description"`
	// The current state of the deployment.
	State DeploymentState `json:"state"`
	// A list of statuses associated with the deployment.
	Statuses getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeploymentStatusesDeploymentStatusConnection `json:"statuses"`
}

// GetCreatedAt returns getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeployment.CreatedAt, and is useful for accessing the field via an interface.
func (v *getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeployment) GetCreatedAt() time.Time {
	return v.CreatedAt
}

// GetCommit returns getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeployment.Commit, and is useful for accessing the field via an interface.
func (v *getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeployment) GetCommit() getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeploymentCommit {
	return v.Commit
}

// GetDescription returns getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeployment.Description, and is useful for accessing the field via an interface.
func (v *getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeployment) GetDescription() string {
	return v.Description
}

// GetState returns getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeployment.State, and is useful for accessing the field via an interface.
func (v *getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeployment) GetState() DeploymentState {
	return v.State
}

// GetStatuses returns getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeployment.Statuses, and is useful for accessing the field via an interface.
func (v *getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeployment) GetStatuses() getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeploymentStatusesDeploymentStatusConnection {
	return v.Statuses
}

// getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeploymentCommit includes the requested fields of the GraphQL type Commit.
// The GraphQL type's documentation follows.
//
// Represents a Git commit.
type getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeploymentCommit struct {
	// The Git commit message
	Message string `json:"message"`
}

// GetMessage returns getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeploymentCommit.Message, and is useful for accessing the field via an interface.
func (v *getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeploymentCommit) GetMessage() string {
	return v.Message
}

// getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeploymentStatusesDeploymentStatusConnection includes the requested fields of the GraphQL type DeploymentStatusConnection.
// The GraphQL type's documentation follows.
//
// The connection type for DeploymentStatus.
type getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeploymentStatusesDeploymentStatusConnection struct {
	// A list of nodes.
	Nodes []getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeploymentStatusesDeploymentStatusConnectionNodesDeploymentStatus `json:"nodes"`
}

// GetNodes returns getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeploymentStatusesDeploymentStatusConnection.Nodes, and is useful for accessing the field via an interface.
func (v *getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeploymentStatusesDeploymentStatusConnection) GetNodes() []getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeploymentStatusesDeploymentStatusConnectionNodesDeploymentStatus {
	return v.Nodes
}

// getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeploymentStatusesDeploymentStatusConnectionNodesDeploymentStatus includes the requested fields of the GraphQL type DeploymentStatus.
// The GraphQL type's documentation follows.
//
// Describes the status of a given deployment attempt.
type getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeploymentStatusesDeploymentStatusConnectionNodesDeploymentStatus struct {
	// Identifies the date and time when the object was last updated.
	UpdatedAt time.Time `json:"updatedAt"`
	// Identifies the current state of the deployment.
	State DeploymentStatusState `json:"state"`
	// Identifies the environment of the deployment at the time of this deployment status
	Environment string `json:"environment"`
}

// GetUpdatedAt returns getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeploymentStatusesDeploymentStatusConnectionNodesDeploymentStatus.UpdatedAt, and is useful for accessing the field via an interface.
func (v *getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeploymentStatusesDeploymentStatusConnectionNodesDeploymentStatus) GetUpdatedAt() time.Time {
	return v.UpdatedAt
}

// GetState returns getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeploymentStatusesDeploymentStatusConnectionNodesDeploymentStatus.State, and is useful for accessing the field via an interface.
func (v *getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeploymentStatusesDeploymentStatusConnectionNodesDeploymentStatus) GetState() DeploymentStatusState {
	return v.State
}

// GetEnvironment returns getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeploymentStatusesDeploymentStatusConnectionNodesDeploymentStatus.Environment, and is useful for accessing the field via an interface.
func (v *getLatestDeploymentsRepositoryDeploymentsDeploymentConnectionNodesDeploymentStatusesDeploymentStatusConnectionNodesDeploymentStatus) GetEnvironment() string {
	return v.Environment
}

// getLatestDeploymentsResponse is returned by getLatestDeployments on success.
type getLatestDeploymentsResponse struct {
	// Lookup a given repository by the owner and repository name.
	Repository getLatestDeploymentsRepository `json:"repository"`
}

// GetRepository returns getLatestDeploymentsResponse.Repository, and is useful for accessing the field via an interface.
func (v *getLatestDeploymentsResponse) GetRepository() getLatestDeploymentsRepository {
	return v.Repository
}

// getPullRequestStatusCheckRollupRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type getPullRequestStatusCheckRollupRepository struct {
	// Returns a single pull request from the current repository by number.
	PullRequest getPullRequestStatusCheckRollupRepositoryPullRequest `json:"pullRequest"`
}

// GetPullRequest returns getPullRequestStatusCheckRollupRepository.PullRequest, and is useful for accessing the field via an interface.
func (v *getPullRequestStatusCheckRollupRepository) GetPullRequest() getPullRequestStatusCheckRollupRepositoryPullRequest {
	return v.PullRequest
}

// getPullRequestStatusCheckRollupRepositoryPullRequest includes the requested fields of the GraphQL type PullRequest.
// The GraphQL type's documentation follows.
//
// A repository pull request.
type getPullRequestStatusCheckRollupRepositoryPullRequest struct {
	// Check and Status rollup information for the PR's head ref.
	StatusCheckRollup getPullRequestStatusCheckRollupRepositoryPullRequestStatusCheckRollup `json:"statusCheckRollup"`
}

// GetStatusCheckRollup returns getPullRequestStatusCheckRollupRepositoryPullRequest.StatusCheckRollup, and is useful for accessing the field via an interface.
func (v *getPullRequestStatusCheckRollupRepositoryPullRequest) GetStatusCheckRollup() getPullRequestStatusCheckRollupRepositoryPullRequestStatusCheckRollup {
	return v.StatusCheckRollup
}

// getPullRequestStatusCheckRollupRepositoryPullRequestStatusCheckRollup includes the requested fields of the GraphQL type StatusCheckRollup.
// The GraphQL type's documentation follows.
//
// Represents the rollup for both the check runs and status for a commit.
type getPullRequestStatusCheckRollupRepositoryPullRequestStatusCheckRollup struct {
	// The combined status for the commit.
	State StatusState `json:"state"`
}

// GetState returns getPullRequestStatusCheckRollupRepositoryPullRequestStatusCheckRollup.State, and is useful for accessing the field via an interface.
func (v *getPullRequestStatusCheckRollupRepositoryPullRequestStatusCheckRollup) GetState() StatusState {
	return v.State
}

// getPullRequestStatusCheckRollupResponse is returned by getPullRequestStatusCheckRollup on success.
type getPullRequestStatusCheckRollupResponse struct {
	// Lookup a given repository by the owner and repository name.
	Repository getPullRequestStatusCheckRollupRepository `json:"repository"`
}

// GetRepository returns getPullRequestStatusCheckRollupResponse.Repository, and is useful for accessing the field via an interface.
func (v *getPullRequestStatusCheckRollupResponse) GetRepository() getPullRequestStatusCheckRollupRepository {
	return v.Repository
}

// getRepoIdRepository includes the requested fields of the GraphQL type Repository.
// The GraphQL type's documentation follows.
//
// A repository contains the content for a project.
type getRepoIdRepository struct {
	// The Node ID of the Repository object
	Id string `json:"id"`
}

// GetId returns getRepoIdRepository.Id, and is useful for accessing the field via an interface.
func (v *getRepoIdRepository) GetId() string { return v.Id }

// getRepoIdResponse is returned by getRepoId on success.
type getRepoIdResponse struct {
	// Lookup a given repository by the owner and repository name.
	Repository getRepoIdRepository `json:"repository"`
}

// GetRepository returns getRepoIdResponse.Repository, and is useful for accessing the field via an interface.
func (v *getRepoIdResponse) GetRepository() getRepoIdRepository { return v.Repository }

// getUserResponse is returned by getUser on success.
type getUserResponse struct {
	// Lookup a user by login.
	User getUserUser `json:"user"`
}

// GetUser returns getUserResponse.User, and is useful for accessing the field via an interface.
func (v *getUserResponse) GetUser() getUserUser { return v.User }

// getUserUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type getUserUser struct {
	// The user's public profile name.
	TheirName string `json:"theirName"`
	// Identifies the date and time when the object was created.
	CreatedAt time.Time `json:"createdAt"`
}

// GetTheirName returns getUserUser.TheirName, and is useful for accessing the field via an interface.
func (v *getUserUser) GetTheirName() string { return v.TheirName }

// GetCreatedAt returns getUserUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *getUserUser) GetCreatedAt() time.Time { return v.CreatedAt }

// getViewerResponse is returned by getViewer on success.
type getViewerResponse struct {
	// The currently authenticated user.
	Viewer getViewerViewerUser `json:"viewer"`
}

// GetViewer returns getViewerResponse.Viewer, and is useful for accessing the field via an interface.
func (v *getViewerResponse) GetViewer() getViewerViewerUser { return v.Viewer }

// getViewerViewerUser includes the requested fields of the GraphQL type User.
// The GraphQL type's documentation follows.
//
// A user is an individual's account on GitHub that owns repositories and can make new content.
type getViewerViewerUser struct {
	// The user's public profile name.
	MyName string `json:"MyName"`
	// Identifies the date and time when the object was created.
	CreatedAt time.Time `json:"createdAt"`
}

// GetMyName returns getViewerViewerUser.MyName, and is useful for accessing the field via an interface.
func (v *getViewerViewerUser) GetMyName() string { return v.MyName }

// GetCreatedAt returns getViewerViewerUser.CreatedAt, and is useful for accessing the field via an interface.
func (v *getViewerViewerUser) GetCreatedAt() time.Time { return v.CreatedAt }

// mergePullRequestMergePullRequestMergePullRequestPayload includes the requested fields of the GraphQL type MergePullRequestPayload.
// The GraphQL type's documentation follows.
//
// Autogenerated return type of MergePullRequest
type mergePullRequestMergePullRequestMergePullRequestPayload struct {
	// The pull request that was merged.
	PullRequest mergePullRequestMergePullRequestMergePullRequestPayloadPullRequest `json:"pullRequest"`
}

// GetPullRequest returns mergePullRequestMergePullRequestMergePullRequestPayload.PullRequest, and is useful for accessing the field via an interface.
func (v *mergePullRequestMergePullRequestMergePullRequestPayload) GetPullRequest() mergePullRequestMergePullRequestMergePullRequestPayloadPullRequest {
	return v.PullRequest
}

// mergePullRequestMergePullRequestMergePullRequestPayloadPullRequest includes the requested fields of the GraphQL type PullRequest.
// The GraphQL type's documentation follows.
//
// A repository pull request.
type mergePullRequestMergePullRequestMergePullRequestPayloadPullRequest struct {
	// Whether or not the pull request was merged.
	Merged bool `json:"merged"`
	// The date and time that the pull request was merged.
	MergedAt time.Time `json:"mergedAt"`
}

// GetMerged returns mergePullRequestMergePullRequestMergePullRequestPayloadPullRequest.Merged, and is useful for accessing the field via an interface.
func (v *mergePullRequestMergePullRequestMergePullRequestPayloadPullRequest) GetMerged() bool {
	return v.Merged
}

// GetMergedAt returns mergePullRequestMergePullRequestMergePullRequestPayloadPullRequest.MergedAt, and is useful for accessing the field via an interface.
func (v *mergePullRequestMergePullRequestMergePullRequestPayloadPullRequest) GetMergedAt() time.Time {
	return v.MergedAt
}

// mergePullRequestResponse is returned by mergePullRequest on success.
type mergePullRequestResponse struct {
	// Merge a pull request.
	MergePullRequest mergePullRequestMergePullRequestMergePullRequestPayload `json:"mergePullRequest"`
}

// GetMergePullRequest returns mergePullRequestResponse.MergePullRequest, and is useful for accessing the field via an interface.
func (v *mergePullRequestResponse) GetMergePullRequest() mergePullRequestMergePullRequestMergePullRequestPayload {
	return v.MergePullRequest
}

// The query or mutation executed by createIssue.
const createIssue_Operation = `
mutation createIssue ($Body: String!, $Title: String!, $RepositoryId: ID!) {
	createIssue(input: {body:$Body,title:$Title,repositoryId:$RepositoryId}) {
		issue {
			id
		}
	}
}
`

func createIssue(
	ctx_ context.Context,
	client_ graphql.Client,
	Body string,
	Title string,
	RepositoryId string,
) (*createIssueResponse, error) {
	req_ := &graphql.Request{
		OpName: "createIssue",
		Query:  createIssue_Operation,
		Variables: &__createIssueInput{
			Body:         Body,
			Title:        Title,
			RepositoryId: RepositoryId,
		},
	}
	var err_ error

	var data_ createIssueResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by createPullRequest.
const createPullRequest_Operation = `
mutation createPullRequest ($BaseRefName: String!, $Body: String!, $HeadRefName: String!, $RepositoryId: ID!, $Title: String!) {
	createPullRequest(input: {baseRefName:$BaseRefName,body:$Body,headRefName:$HeadRefName,repositoryId:$RepositoryId,title:$Title}) {
		pullRequest {
			id
			number
		}
	}
}
`

func createPullRequest(
	ctx_ context.Context,
	client_ graphql.Client,
	BaseRefName string,
	Body string,
	HeadRefName string,
	RepositoryId string,
	Title string,
) (*createPullRequestResponse, error) {
	req_ := &graphql.Request{
		OpName: "createPullRequest",
		Query:  createPullRequest_Operation,
		Variables: &__createPullRequestInput{
			BaseRefName:  BaseRefName,
			Body:         Body,
			HeadRefName:  HeadRefName,
			RepositoryId: RepositoryId,
			Title:        Title,
		},
	}
	var err_ error

	var data_ createPullRequestResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getLatestDeployments.
const getLatestDeployments_Operation = `
query getLatestDeployments ($owner: String!, $repo: String!) {
	repository(owner: $owner, name: $repo) {
		deployments(last: 10) {
			nodes {
				createdAt
				commit {
					message
				}
				description
				state
				statuses(first: 10) {
					nodes {
						updatedAt
						state
						environment
					}
				}
			}
		}
	}
}
`

func getLatestDeployments(
	ctx_ context.Context,
	client_ graphql.Client,
	owner string,
	repo string,
) (*getLatestDeploymentsResponse, error) {
	req_ := &graphql.Request{
		OpName: "getLatestDeployments",
		Query:  getLatestDeployments_Operation,
		Variables: &__getLatestDeploymentsInput{
			Owner: owner,
			Repo:  repo,
		},
	}
	var err_ error

	var data_ getLatestDeploymentsResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getPullRequestStatusCheckRollup.
const getPullRequestStatusCheckRollup_Operation = `
query getPullRequestStatusCheckRollup ($owner: String!, $repo: String!, $prNumber: Int!) {
	repository(owner: $owner, name: $repo) {
		pullRequest(number: $prNumber) {
			statusCheckRollup {
				state
			}
		}
	}
}
`

func getPullRequestStatusCheckRollup(
	ctx_ context.Context,
	client_ graphql.Client,
	owner string,
	repo string,
	prNumber int,
) (*getPullRequestStatusCheckRollupResponse, error) {
	req_ := &graphql.Request{
		OpName: "getPullRequestStatusCheckRollup",
		Query:  getPullRequestStatusCheckRollup_Operation,
		Variables: &__getPullRequestStatusCheckRollupInput{
			Owner:    owner,
			Repo:     repo,
			PrNumber: prNumber,
		},
	}
	var err_ error

	var data_ getPullRequestStatusCheckRollupResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getRepoId.
const getRepoId_Operation = `
query getRepoId ($Owner: String!, $Name: String!) {
	repository(owner: $Owner, name: $Name) {
		id
	}
}
`

func getRepoId(
	ctx_ context.Context,
	client_ graphql.Client,
	Owner string,
	Name string,
) (*getRepoIdResponse, error) {
	req_ := &graphql.Request{
		OpName: "getRepoId",
		Query:  getRepoId_Operation,
		Variables: &__getRepoIdInput{
			Owner: Owner,
			Name:  Name,
		},
	}
	var err_ error

	var data_ getRepoIdResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getUser.
const getUser_Operation = `
query getUser ($Login: String!) {
	user(login: $Login) {
		theirName: name
		createdAt
	}
}
`

// getUser gets the given user's name from their username.
func getUser(
	ctx_ context.Context,
	client_ graphql.Client,
	Login string,
) (*getUserResponse, error) {
	req_ := &graphql.Request{
		OpName: "getUser",
		Query:  getUser_Operation,
		Variables: &__getUserInput{
			Login: Login,
		},
	}
	var err_ error

	var data_ getUserResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by getViewer.
const getViewer_Operation = `
query getViewer {
	viewer {
		MyName: name
		createdAt
	}
}
`

func getViewer(
	ctx_ context.Context,
	client_ graphql.Client,
) (*getViewerResponse, error) {
	req_ := &graphql.Request{
		OpName: "getViewer",
		Query:  getViewer_Operation,
	}
	var err_ error

	var data_ getViewerResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}

// The query or mutation executed by mergePullRequest.
const mergePullRequest_Operation = `
mutation mergePullRequest ($pullRequestId: ID!) {
	mergePullRequest(input: {pullRequestId:$pullRequestId}) {
		pullRequest {
			merged
			mergedAt
		}
	}
}
`

func mergePullRequest(
	ctx_ context.Context,
	client_ graphql.Client,
	pullRequestId string,
) (*mergePullRequestResponse, error) {
	req_ := &graphql.Request{
		OpName: "mergePullRequest",
		Query:  mergePullRequest_Operation,
		Variables: &__mergePullRequestInput{
			PullRequestId: pullRequestId,
		},
	}
	var err_ error

	var data_ mergePullRequestResponse
	resp_ := &graphql.Response{Data: &data_}

	err_ = client_.MakeRequest(
		ctx_,
		req_,
		resp_,
	)

	return &data_, err_
}
